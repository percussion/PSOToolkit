/*******************************************************************************
 * Copyright (c) 1999-2011 Percussion Software.
 * 
 * Permission is hereby granted, free of charge, to use, copy and create derivative works of this software and associated documentation files (the "Software") for internal use only and only in connection with products from Percussion Software. 
 * 
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL PERCUSSION SOFTWARE BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 ******************************************************************************/
package com.percussion.pso.validation;

import java.util.ArrayList;
import java.util.List;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

import com.percussion.xml.PSXmlTreeWalker;
/**
 * Support routines for processing Content Item XML documents. 
 * These documents are generated by the server in response to 
 * an OpenItem or ViewItem.  These routines are likely 
 * to be useful in validation and post-exits. 
 * 
 *
 * @author DavidBenua
 *
 */
public class PSOItemXMLSupport
{
   private static Log log = LogFactory.getLog(PSOItemXMLSupport.class);

   /**
    * Finds the field element for a given field
    * @param inputDoc the XML document from the content editor
    * @param fieldName the field name
    * @return the XML element that represents the field. Will be <code>null</code> if the 
    * field does not exist.
    */
   public Element getFieldElement(Document inputDoc, String fieldName)
   {
      PSXmlTreeWalker fieldWalker = new PSXmlTreeWalker(inputDoc.getDocumentElement());
      fieldWalker.getNextElement("ItemContent",PSXmlTreeWalker.GET_NEXT_ALLOW_CHILDREN); 
      Element field = fieldWalker.getNextElement("DisplayField", PSXmlTreeWalker.GET_NEXT_ALLOW_CHILDREN); 
      while(field != null)
      {
         PSXmlTreeWalker fw = new PSXmlTreeWalker(field); 
         Element control = fw.getNextElement("Control", PSXmlTreeWalker.GET_NEXT_ALLOW_CHILDREN);
         if(control != null)
         {
            String fld = control.getAttribute("paramName");
            if(StringUtils.isNotBlank(fld) && fld.equals(fieldName))
            {  //the field name matches
               return field; 
            }
         }
         field = fieldWalker.getNextElement("DisplayField", PSXmlTreeWalker.GET_NEXT_ALLOW_SIBLINGS); 
      }
      return null; 
   }

   /**
    * Finds the String value for a field element.  
    * @param field the field element 
    * @return the value. Will be <code>null</code> if there is no &lt;Value&gt; node in the 
    * field element. 
    * @see #getFieldElement(Document, String)
    */
   public String getFieldValue(Element field)
   {
      PSXmlTreeWalker w = new PSXmlTreeWalker(field);
      Element c = w.getNextElement("Control", PSXmlTreeWalker.GET_NEXT_ALLOW_CHILDREN);
      if(c != null)
      {
         c = w.getNextElement("Value", PSXmlTreeWalker.GET_NEXT_ALLOW_CHILDREN);
         if(c == null)
         {
            return null;
         }
         String val = w.getElementData();
         return val; 
      }
      return null; 
   }

   
   /**
    * Finds the label for a field element. This can be used for error reporting. 
    * @param field the field element
    * @return the label. Will be <code>null</code> if there is no label or the field is <code>null</code>. 
    */
   public String getFieldLabel(Element field)
   {
      if (field != null)
      {
         PSXmlTreeWalker w = new PSXmlTreeWalker(field);
         Element l = w.getNextElement("DisplayLabel",
               PSXmlTreeWalker.GET_NEXT_ALLOW_CHILDREN);
         if (l != null)
         {
            String label = w.getElementData();
            return StringUtils.chomp(label, ":");
         }
         log.debug("field has no label");          
      }
      return null;
   } 
   
   /**
    * Determines if a field is multi-value or not.
    * @param field the field element
    * @return <code>true</code> if this is a multi-value field. 
    */
   public boolean isMultiValue(Element field)
   {
       PSXmlTreeWalker w = new PSXmlTreeWalker(field); 
       Element c = w.getNextElement("Control", PSXmlTreeWalker.GET_NEXT_ALLOW_CHILDREN);
       if(c != null)
       {
          String dim = c.getAttribute("dimension");
          if(StringUtils.isNotBlank(dim) && dim.equals("array"))
          {
             return true; 
          }
       }
       return false;
   }
   
   
   public List<String> getFieldValues(Element field)
   {
      List<String> values = new ArrayList<String>(); 
      
      PSXmlTreeWalker w = new PSXmlTreeWalker(field);
      Element entry = w.getNextElement("Control/DisplayChoices/DisplayEntry", PSXmlTreeWalker.GET_NEXT_ALLOW_CHILDREN);
      while(entry != null)
      {
         String selected = w.getElementData("@selected", false);
         if(StringUtils.isNotBlank(selected) && selected.equals("yes"))
         {
            String val = w.getElementData("Value", false);
            if(StringUtils.isNotBlank(val))
            {
               values.add(val);
            }
         }
         entry = w.getNextElement("DisplayEntry", PSXmlTreeWalker.GET_NEXT_ALLOW_SIBLINGS); 
      }
      return values; 
   }
}
